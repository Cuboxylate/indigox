## \file serialiser.py
from pathlib import Path
import indigox as ix

__all__ = ["SaveITPFile"]

def SaveITPFile(path, mol, pmol=None):
  h_mass = ix.GetPeriodicTable()["H"].GetAtomicMass()
  file = path.open('w')
  # header printing
  header = """; File generated by the indigox package
; No gurantees are provided for the usefulness of this file
    
[ moleculetype ]
; Name  nrexcl
TEST   3
    
[ atoms ]"""
  print(header, file=file)
  
  # atom printing
  atm_fmt_str = "{index:>5} {type:>6} {residx:>5} {resname:>8} {name:>7} {chargegroup:>5} {charge:>11.5f} {mass:>9.4f}  {extra}"
  for atom in mol.GetAtoms():
    atm_dat = {"index": atom.GetIndex() + 1,
              "type": atom.GetType().GetName() if atom.HasType() else "%%%",
              "residx": 1,
              "resname": "TEST",
              "name": atom.GetName(),
              "chargegroup": atom.GetTag(),
              "charge": atom.GetPartialCharge(),
              "mass": atom.GetElement().GetAtomicMass() + atom.GetImplicitCount() * h_mass
              }
    if pmol is not None:
      patom = pmol.GetAtom(atom)
      extra_info = ";"
      if not len(patom.GetMappedCharges()):
        extra_info += " UNMAPPED"
      else:
        mu = patom.MeanCharge()
        eta = patom.MedianCharge()
        sigma = patom.StandardDeviationCharge()
        if round(mu, 5) != round(eta, 5) or round(sigma, 5) != 0.0:
          extra_info += " mean: {:.5f}, median: {:.5f}, stdev: {:.5f}".format(mu, eta, sigma)
      if extra_info == ";":
        atm_dat["extra"] = ""
      else:
        atm_dat["extra"] = extra_info
    print(atm_fmt_str.format(**atm_dat), file=file)

  # bond printing
  print("\n[ bonds ]", file=file)
  bnd_fmt_str = "{atoma:>5} {atomb:>5} {typecode:>5}    gb_{typeid}   {extra}"
  for bond in sorted(mol.GetBonds(), key=lambda x: x.HasType()):
    bnd_dat = {"atoma" : bond.GetAtoms()[0].GetIndex() + 1,
               "atomb" : bond.GetAtoms()[1].GetIndex() + 1,
               "typecode" : 2,
               "typeid" : bond.GetType().GetID() if bond.HasType() else "UNMAPPED"
              }
    if pmol is not None and bond.HasType():
      pbond = pmol.GetBond(bond)
      other = ["gb_{}".format(tm.GetID()) for tm in pbond.GetMappedTypeCounts()]
      bnd_dat["extra"] = ", ".join(x for x in other if x != "gb_{}".format(bnd_dat["typeid"]))
    else:
      bnd_dat["extra"] = ""
    if bnd_dat["extra"]:
      bnd_dat["extra"] = "; Other terms: " + bnd_dat["extra"]
    print(bnd_fmt_str.format(**bnd_dat), file=file)

  # pairs printing
  print("\n[ pairs ]", file=file)
  pair_fmt_str = "{atoma:>5} {atomb:>5}  1"
  for dhd in mol.GetDihedrals():
    atoms = dhd.GetAtoms()
    if not mol.HasBond(atoms[0], atoms[1]):
      continue
    if not mol.HasBond(atoms[1], atoms[2]):
      continue
    if not mol.HasBond(atoms[2], atoms[3]):
      continue

    if ((mol.GetBond(atoms[0], atoms[1]).GetOrder() == ix.BondOrder.AROMATIC)
        and (mol.GetBond(atoms[1], atoms[2]).GetOrder() == ix.BondOrder.AROMATIC)
        and (mol.GetBond(atoms[2], atoms[3]).GetOrder() == ix.BondOrder.AROMATIC)):
        continue

    if atoms[0].GetIndex() > atoms[3].GetIndex():
        pair_dat = {"atoma" : atoms[3].GetIndex() + 1,
                    "atomb" : atoms[0].GetIndex() + 1}
    else:
        pair_dat = {"atoma" : atoms[0].GetIndex() + 1,
                   "atomb" : atoms[3].GetIndex() + 1}
    print(pair_fmt_str.format(**pair_dat), file=file)

  # angle printing
  print("\n[ angles ]", file=file)
  ang_fmt_str = "{atoma:>5} {atomb:>5} {atomc:>5} {typecode:>5}    ga_{typeid}   {extra}"
  for angle in sorted(mol.GetAngles(), key=lambda x: x.HasType()):
    atoms = angle.GetAtoms()
    ang_dat = {"atoma" : atoms[0].GetIndex() + 1,
               "atomb" : atoms[1].GetIndex() + 1,
               "atomc" : atoms[2].GetIndex() + 1,
               "typecode" : 2,
               "typeid" : angle.GetType().GetID() if angle.HasType() else "UNMAPPED",
               "extra" : ""
               }
    if pmol is not None and angle.HasType():
      pangle = pmol.GetAngle(angle)
      other = ["ga_{}".format(tm.GetID()) for tm in pangle.GetMappedTypeCounts()]
      ang_dat["extra"] = ", ".join(x for x in other if x != "ga_{}".format(ang_dat["typeid"]))
    if ang_dat["extra"]:
      ang_dat["extra"] = "; Other terms: " + ang_dat["extra"]
    print(ang_fmt_str.format(**ang_dat), file=file)

  # dihedral printing
  print("\n[ dihedrals ]", file=file)
  dhd_fmt_str = "{atoma:>5} {atomb:>5} {atomc:>5} {atomd:>5} {typecode:>5}    {typeid}    {extra}"
  done_dhds = []
  for bnd in mol.GetBonds():
    dhds = _GetBondDihedrals(bnd)
    if not dhds:
      continue
    param_dhd = [x for x in dhds if x.HasType()]
    if not param_dhd:
      done_dhds.append(dhds[0])
    else:
      done_dhds.extend(param_dhd)
  for dhd in mol.GetDihedrals():
    if dhd.HasType() and dhd not in done_dhds:
      done_dhds.append(dhd)
  for dhd in sorted(done_dhds, key=lambda x: x.HasType()):
    atoms = dhd.GetAtoms()
    if not dhd.HasType():
      dhd_dat = {"atoma" : atoms[0].GetIndex() + 1,
                 "atomb" : atoms[1].GetIndex() + 1,
                 "atomc" : atoms[2].GetIndex() + 1,
                 "atomd" : atoms[3].GetIndex() + 1,
                 "extra" : "",
                 "typecode" : "",
                 "typeid" : "UNMAPPED"
                 }
      print(dhd_fmt_str.format(**dhd_dat), file=file)
    else:
      for t in dhd.GetTypes():
        dhd_dat = {"atoma" : atoms[0].GetIndex() + 1,
                  "atomb" : atoms[1].GetIndex() + 1,
                  "atomc" : atoms[2].GetIndex() + 1,
                  "atomd" : atoms[3].GetIndex() + 1,
                  "extra" : ""
                 }
        if t.GetType() == ix.DihedralType.Proper:
          dhd_dat["typecode"] = 1
          dhd_dat["typeid"] = "gd_{}".format(t.GetID())
        else:
          dhd_dat["typecode"] = 2
          dhd_dat["typeid"] = "gi_{}".format(t.GetID())
        print(dhd_fmt_str.format(**dhd_dat), file=file)
  file.close()


def _GetBondDihedrals(bond):
  atoms = bond.GetAtoms()
  params = []
  for dhd in atoms[0].GetDihedrals():
    dhd_atms = dhd.GetAtoms()
    if ((dhd_atms[1] == atoms[0] and dhd_atms[2] == atoms[1])
        or (dhd_atms[2] == atoms[0] and dhd_atms[1] == atoms[1])):
      params.append(dhd)
  return params



