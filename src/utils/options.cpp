/** @file options.cpp
 *  @brief Default values for all available options
 *  @author Ivan Welsh
 *  @date 7 January 2018
 *  @lastmodify 7 January 2018
 *  @version 0.1
 *  @copyright The MIT License
 */

#include <limits>

#include "indigox/utils/options.hpp"

using namespace indigox;

typedef Options opt_;
typedef opt_::AssignElectrons assign_;
typedef assign_::AStar astar_;
typedef assign_::FPT fpt_;
typedef assign_::LocalOptimisation lo_;

#define Q(x) #x
#define QUOTE(x) Q(x)

// General
#ifndef DFT_DATA_DIR
//#define DFT_DATA_DIR "data"
#define DFT_DATA_DIR /Users/iwelsh/GitHub/indigox/indigox/data
#endif
#ifndef DFT_PERIODIC_TABLE_FILE
#define DFT_PERIODIC_TABLE_FILE "periodictable.txt"
#endif

std::string opt_::DATA_DIRECTORY = QUOTE(DFT_DATA_DIR);
std::string opt_::PERIODIC_TABLE_FILE = DFT_PERIODIC_TABLE_FILE;

// AssignElectron General
#ifndef DFT_ASSIGNELECTRON_ALGORITHM
#define DFT_ASSIGNELECTRON_ALGORITHM assign_::Algorithm::FPT
#endif
#ifndef DFT_ASSIGNELECTRON_ATOM_FILE
#define DFT_ASSIGNELECTRON_ATOM_FILE "atomenergies_def2svpd.txt"
#endif
#ifndef DFT_ASSIGNELECTRON_BOND_FILE
#define DFT_ASSIGNELECTRON_BOND_FILE "bondenergies_def2svpd.txt"
#endif
#ifndef DFT_ASSIGNELECTRON_INFINITY
#define DFT_ASSIGNELECTRON_INFINITY std::numeric_limits<FCSCORE>::max()
#endif
#ifndef DFT_ASSIGNELECTRON_USE_PAIRS
#define DFT_ASSIGNELECTRON_USE_PAIRS true
#endif
#ifndef DFT_ASSIGNELECTRON_CHARGED_BONDS
#define DFT_ASSIGNELECTRON_CHARGED_BONDS false
#endif
#ifndef DFT_ASSIGNELECTRON_MAX_BOND_ORDER
#define DFT_ASSIGNELECTRON_MAX_BOND_ORDER 3
#endif
#ifndef DFT_ASSIGNELECTRON_ALLOWED_ELEMENTS
#define DFT_ASSIGNELECTRON_ALLOWED_ELEMENTS "H", "C", "N", "O", "S", "P", "F", "Cl", "Br"
#endif
#ifndef DFT_ASSIGNELECTRON_AUTO_USE_PAIRS
#define DFT_ASSIGNELECTRON_AUTO_USE_PAIRS true
#endif
#ifndef DFT_ASSIGNELECTRON_HIGHEST_CHARGE
#define DFT_ASSIGNELECTRON_HIGHEST_CHARGE 0
#endif
#ifndef DFT_ASSIGNELECTRON_ALLOW_CHARGE_CARBON
#define DFT_ASSIGNELECTRON_ALLOW_CHARGE_CARBON true
#endif
#ifndef DFT_ASSIGNELECTRON_MAX_RESULT
#define DFT_ASSIGNELECTRON_MAX_RESULT 0
#endif
#ifndef DFT_ASSIGNELECTRON_PREPLACE
#define DFT_ASSIGNELECTRON_PREPLACE true
#endif

assign_::Algorithm assign_::ALGORITHM = DFT_ASSIGNELECTRON_ALGORITHM;
std::string assign_::ATOM_ENERGY_FILE = DFT_ASSIGNELECTRON_ATOM_FILE;
std::string assign_::BOND_ENERGY_FILE = DFT_ASSIGNELECTRON_BOND_FILE;
FCSCORE assign_::INF = DFT_ASSIGNELECTRON_INFINITY;
uint8_t assign_::MAXIMUM_BOND_ORDER = DFT_ASSIGNELECTRON_MAX_BOND_ORDER;
bool assign_::USE_ELECTRON_PAIRS = DFT_ASSIGNELECTRON_USE_PAIRS;
bool assign_::AUTO_USE_ELECTRON_PAIRS = DFT_ASSIGNELECTRON_AUTO_USE_PAIRS;
bool assign_::USE_CHARGED_BOND_ENERGIES = DFT_ASSIGNELECTRON_CHARGED_BONDS;
std::set<std::string> assign_::ALLOWED_ELEMENTS = {DFT_ASSIGNELECTRON_ALLOWED_ELEMENTS};
uint32_t assign_::HIGHEST_MAGNITUDE_CHARGE = DFT_ASSIGNELECTRON_HIGHEST_CHARGE;
bool assign_::ALLOW_CHARGED_CARBON = DFT_ASSIGNELECTRON_ALLOW_CHARGE_CARBON;
uint32_t assign_::MAXIMUM_RESULT_COUNT = DFT_ASSIGNELECTRON_MAX_RESULT;
bool assign_::PREPLACE_ELECTRONS = DFT_ASSIGNELECTRON_PREPLACE;


// AssignElectron A*
#ifndef DFT_ASSIGNELECTRON_ASTAR_HEURISTIC
#define DFT_ASSIGNELECTRON_ASTAR_HEURISTIC astar_::Heuristic::ABSTEMIOUS
#endif
#ifndef DFT_ASSIGNELECTRON_ASTAR_MEGABYTE_LIMIT
#define DFT_ASSIGNELECTRON_ASTAR_MEGABYTE_LIMIT 4096
#endif

astar_::Heuristic astar_::HEURISTIC = DFT_ASSIGNELECTRON_ASTAR_HEURISTIC;
uint64_t astar_::MEGABYTE_LIMIT = DFT_ASSIGNELECTRON_ASTAR_MEGABYTE_LIMIT;


// AssignElectron FPT
#ifndef DFT_ASSIGNELECTRON_FPT_JAR_FILE
#define DFT_ASSIGNELECTRON_FPT_JAR_FILE "libtw.jar"
#endif
#ifndef DFT_ASSIGN_ELECTRON_TD_ADD_EDGES
#define DFT_ASSIGN_ELECTRON_TD_ADD_EDGES false
#endif
#ifndef DFT_ASSIGNELECTRON_FPT_PERM_ALGO
#define DFT_ASSIGNELECTRON_FPT_PERM_ALGO fpt_::PermAlgo::MINADDEDGES
#endif
#ifndef DFT_ASSIGNELECTRON_FPT_MINIMUM_DEPTH
#define DFT_ASSIGNELECTRON_FPT_MINIMUM_DEPTH 1
#endif

std::string fpt_::LIBTW_JAR_FILE = DFT_ASSIGNELECTRON_FPT_JAR_FILE;
bool fpt_::ADD_EDGES_TO_TD = DFT_ASSIGN_ELECTRON_TD_ADD_EDGES;
fpt_::PermAlgo fpt_::PERM_ALGO = DFT_ASSIGNELECTRON_FPT_PERM_ALGO;
uint32_t fpt_::MINIMUM_PROPAGATION_DEPTH = DFT_ASSIGNELECTRON_FPT_MINIMUM_DEPTH;

// AssignElectron LocalOptimistaion
#ifndef DFT_ASSIGNELECTRON_LO_OPTIMISE_ALL
#define DFT_ASSIGNELECTRON_LO_OPTIMISE_ALL true
#endif
#ifndef DFT_ASSIGNELECTRON_LO_CACHE
#define DFT_ASSIGNELECTRON_LO_CACHE true
#endif
#ifndef DFT_ASSIGNELECTRON_LO_CACHE_INFINITIES
#define DFT_ASSIGNELECTRON_LO_CACHE_INFINITIES false
#endif
#ifndef DFT_ASSIGNELECTRON_LO_TIMELIMIT
#define DFT_ASSIGNELECTRON_LO_TIMELIMIT 1000
#endif
bool lo_::OPTIMISE_ALL_MINIMUMS = DFT_ASSIGNELECTRON_LO_OPTIMISE_ALL;
bool lo_::CACHE_RESULTS = DFT_ASSIGNELECTRON_LO_CACHE;
bool lo_::CACHE_INFINITIES = DFT_ASSIGNELECTRON_LO_CACHE_INFINITIES;
uint32_t lo_::TIMEOUT_LIMIT = DFT_ASSIGNELECTRON_LO_TIMELIMIT;


void Options::Reset() {
  // AssignElectron general
  assign_::ALGORITHM = DFT_ASSIGNELECTRON_ALGORITHM;
  assign_::ATOM_ENERGY_FILE = DFT_ASSIGNELECTRON_ATOM_FILE;
  assign_::BOND_ENERGY_FILE = DFT_ASSIGNELECTRON_BOND_FILE;
  assign_::INF = DFT_ASSIGNELECTRON_INFINITY;
  assign_::MAXIMUM_BOND_ORDER = DFT_ASSIGNELECTRON_MAX_BOND_ORDER;
  assign_::USE_ELECTRON_PAIRS = DFT_ASSIGNELECTRON_USE_PAIRS;
  assign_::AUTO_USE_ELECTRON_PAIRS = DFT_ASSIGNELECTRON_AUTO_USE_PAIRS;
  assign_::USE_CHARGED_BOND_ENERGIES = DFT_ASSIGNELECTRON_CHARGED_BONDS;
  assign_::ALLOWED_ELEMENTS.clear();
  assign_::ALLOWED_ELEMENTS = {DFT_ASSIGNELECTRON_ALLOWED_ELEMENTS};
  assign_::HIGHEST_MAGNITUDE_CHARGE = DFT_ASSIGNELECTRON_HIGHEST_CHARGE;
  assign_::ALLOW_CHARGED_CARBON = DFT_ASSIGNELECTRON_ALLOW_CHARGE_CARBON;
  assign_::MAXIMUM_RESULT_COUNT = DFT_ASSIGNELECTRON_MAX_RESULT;
  assign_::PREPLACE_ELECTRONS = DFT_ASSIGNELECTRON_PREPLACE;
  // AssignElectron A*
  astar_::HEURISTIC = DFT_ASSIGNELECTRON_ASTAR_HEURISTIC;
  astar_::MEGABYTE_LIMIT = DFT_ASSIGNELECTRON_ASTAR_MEGABYTE_LIMIT;
  Options::DATA_DIRECTORY = QUOTE(DFT_DATA_DIR);
  Options::PERIODIC_TABLE_FILE = DFT_PERIODIC_TABLE_FILE;
  // AssignElectron FPT
  fpt_::LIBTW_JAR_FILE = DFT_ASSIGNELECTRON_FPT_JAR_FILE;
  fpt_::ADD_EDGES_TO_TD = DFT_ASSIGN_ELECTRON_TD_ADD_EDGES;
  // AssignElectron LocalOptimistion
  lo_::OPTIMISE_ALL_MINIMUMS = DFT_ASSIGNELECTRON_LO_OPTIMISE_ALL;
  lo_::CACHE_RESULTS = DFT_ASSIGNELECTRON_LO_CACHE;
  lo_::CACHE_INFINITIES = DFT_ASSIGNELECTRON_LO_CACHE_INFINITIES;
  lo_::TIMEOUT_LIMIT = DFT_ASSIGNELECTRON_LO_TIMELIMIT;
  
}


